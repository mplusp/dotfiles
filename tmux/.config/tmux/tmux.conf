# Enable focus events
set -s focus-events on

# Remove delay after ESC is pressed
set -s escape-time 0

# Use 256 and RGB capabilities (make sure the terminal actually supports these)
set -s default-terminal "tmux-256color"
set -as terminal-features ",xterm*:RGB"
set -ga terminal-overrides ",*256col*:Tc"

# Increase scrollback
set -g history-limit 150000

# Show status line messages until key is pressed
set -g display-time 0

# Enable mouse
set -g mouse on

# vi keys in copy-mode and in status line
set -g mode-keys vi
set -g status-keys vi

# Make scrolling with the mousewheel work for man / less / more
# (Alt+WheelUp/Alt+WheelDown)
# https://github.com/tmux/tmux/wiki/Recipes#send-up-and-down-keys-for-the-mouse-wheel
bind -n M-WheelUpPane if -Ft= "#{mouse_any_flag}" "send -M" "send Up Up Up"
bind -n M-WheelDownPane if -Ft= "#{mouse_any_flag}" "send -M" "send Down Down Down"

# Re-order windows
bind -r C-Left swap-window -t -1\; select-window -t -1
bind -r C-Right swap-window -t +1\; select-window -t +1

# Pane movement
## Join pane
bind-key J choose-tree -Z "join-pane -s '%%'" \; display -d 0 "Join pane from..."
## Send pane
bind-key K display-menu -T "Send pane to..." \
    "Existing session" e "choose-tree -Z \"join-pane -t '%%'\"" \
    "New session" n "command-prompt -p 'New session name:' \"new-session -d -s '%1' \\; move-pane -t '%1' \\; kill-pane -t '%1':1.1\""

# Reload config
unbind r
bind r source-file ~/.config/tmux/tmux.conf \; display "Config reloaded"

# Rotate status line visibility.
bind b run-shell "
  if [[ $(tmux show -g status) == 'status off' ]]; then
    tmux set -g status on;
    tmux display 'status: on';
  elif [[ $(tmux show -g status) == 'status on' ]]; then
    tmux set -g status 2;
    tmux display 'status: 2';
  else
    tmux set -g status off;
    tmux display 'status: off';
  fi
"

# Toggle status line position
bind B run-shell "
  if [[ $(tmux show -g status-position) == 'status-position top' ]]; then
    tmux set -g status-position bottom;
    tmux set -g status on;
    tmux display 'status-position: bottom, status: on';
  else
    tmux set -g status-position top;
    tmux set -g status 2;
    tmux display 'status-position: top, status: 2';
  fi
"

# On some systems, there doesn't seem to be the correct tmux-256color terminfo,
# which leads to problems (e.g. duplicate characters). Set $TERM to
# xterm-256color instead with a keybind. Also set up some more environment
# variables for correct color handling. `send` literally makes tmux type this
# into the shell.
bind T "send export; send Space; send COLORTERM=truecolor; send Space && Space; send export; send Space; send TERM=xterm-256color; send Space && Space; send export; send Space; send TERM_PROGAM=tmux; send Space && Space; send export; send Space; send TERM_PROGRAM_VERSION=3.5a; send Enter"

# Open new windows and panes with current pane's path
bind c new-window -c "#{pane_current_path}"
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -hc "#{pane_current_path}"

# Open claude code at current path in floating window / h-/v-split / new window
bind C-h popup -w 90% -h 90% -EE -d "#{pane_current_path}" 'eval "$(mise env)" && claude'
bind M-h split-window -hc "#{pane_current_path}" 'eval "$(mise env)" && claude'
bind M-H split-window -c "#{pane_current_path}" 'eval "$(mise env)" && claude'
bind H new-window -c "#{pane_current_path}" 'eval "$(mise env)" && claude'

# Open opencode at current path in floating window / h-/v-split / new window
bind C-f popup -w 90% -h 90% -EE -d "#{pane_current_path}" 'eval "$(mise env)" && opencode'
bind M-f split-window -hc "#{pane_current_path}" 'eval "$(mise env)" && opencode'
bind M-F split-window -c "#{pane_current_path}" 'eval "$(mise env)" && opencode'
bind F new-window -c "#{pane_current_path}" 'eval "$(mise env)" && opencode'

# Open lazygit at current path in floating window / h-/v-split / new window
bind C-g popup -w 90% -h 90% -EE -d "#{pane_current_path}" 'eval "$(mise env)" && lazygit'
bind M-g split-window -hc "#{pane_current_path}" 'eval "$(mise env)" && lazygit'
bind M-G split-window -c "#{pane_current_path}" 'eval "$(mise env)" && lazygit'
bind G new-window -c "#{pane_current_path}" 'eval "$(mise env)" && lazygit'

# Open given program at current path in floating window / h-/v-split / new window
# The popup/pane/window closes as soon as the program is finished.
# Opens a new shell, if you dont't specify a command.
bind C-a command-prompt -p "open in popup: " "popup -w 90% -h 90% -EE -d '#{pane_current_path}' '%%'"
bind M-a command-prompt -p "open in horizontal split: "\
  "split-window -hc '#{pane_current_path}' '%1'"
bind M-A command-prompt -p "open in vertical split: "\
  "split-window -c '#{pane_current_path}' '%1'"
bind A command-prompt -p "open in new window: "\
  "new-window -c '#{pane_current_path}' '%1'"

# Open scratch tmux session in popup / switch to scratch session
bind C-s popup -w 90% -h 90% -EE "tmux new -As scratch"
bind S new-window "tmux new -d -s scratch; tmux switch-client -t scratch"

# Open fzf-based session switcher / session creation popup
bind C-n popup -E -w "50%" -h "30%" '
  tmux ls 2>/dev/null | cut -d: -f1 |
  grep -v $(tmux display -p "#S") |
  fzf --reverse --print-query | {
    read query
    read selection || selection=""
    if [ -z "$selection" ]; then
      tmux new -ds "$query" && tmux switch-client -t "$query"
    else
      tmux switch-client -t "$selection"
    fi
  }
'
# Open session in popup
# TODO: make this work the same similar to the fzf-based session switcher /
# session creation popup.
bind M-n command-prompt -p "open session in popup: " "popup -w 90% -h 90% -EE 'tmux new -As '%%'"

# vi-like keybinds for selecting text in copy-mode
bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'y' send -X copy-selection-and-cancel

# Terminal titles
set -g set-titles on
set -g set-titles-string "#I:#W#{?window_flags,#{window_flags}, } - #S:#I.#P"

# Tokyonight "Night" color palette
## TODO: Add "Day" palette as an alternative when using "Light" appearance
set -g @blue "#24283b"
set -g @blue2 "#525c7d"
set -g @blue3 "#7aa2f7"
set -g @purple "#9d7cd8"
set -g @red "#f7768e"
set -g @yellow "#e0af68"

# Status line
set -g status 2
set -g status-format[1] ""
set -g status-position top
set -g status-style "fg=default bg=default"
set -g status-left ""
set -g status-right "#[fg=#{@purple}]#S:#I.#P"

# Status messages
set -g message-style "fg=#{@blue} bg=#{@blue3}"
set -g message-command-style "fg=#{@blue} bg=#{@yellow}"

# Menus
set -g menu-border-style "fg=#{@red} bg=default"
set -g menu-style "fg=#{@blue3} bg=default"
set -g menu-selected-style "fg=#{@blue} bg=#{@red}"

# Popups
set -g popup-border-style "fg=#{@red} bg=default"

# Copy mode
set -g mode-style "fg=#{@blue} bg=#{@blue3}"
set -g copy-mode-match-style "fg=#{@blue} bg=#{@blue3}"
set -g copy-mode-current-match-style "fg=#{@blue} bg=#{@red}"
set -g copy-mode-mark-style "fg=#{@green} bg=#{@purple}"

# Windows
set -g base-index 1
set -g renumber-windows on
setw -g window-status-format "#[fg=#{@blue3}]#I:#W#{?window_flags,#{window_flags}, }#[fg=#{@blue3}]#[bg=default]"
setw -g window-status-current-format "#[fg=#{@red}]#I:#W#{?window_flags,#{window_flags}, }"

# Panes
set -g pane-base-index 1
set -g pane-border-indicators arrows
set -g pane-border-style "bg=default fg=#{@blue2}"
set -g pane-active-border-style "bg=default fg=#{@blue3}"


# TPM
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'abhinav/tmux-fastcopy'
set -g @plugin 'niqodea/tmux-matryoshka'

# Make tmux-fastcopy also copy to system clipboard
set -g @fastcopy-action 'tmux load-buffer -w -'

# Init TPM. Keep this line at the very bottom of tmux.conf!
run '~/.config/tmux/plugins/tpm/tpm'
